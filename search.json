[{"categories":"论文阅读","content":"1 论文链接 https://arxiv.org/abs/1706.03762 ","date":"2024-04-18","objectID":"/posts/doc/transformer/:1:0","tags":"transformer","title":"【论文阅读】Attention Is All You Need","uri":"/posts/doc/transformer/"},{"categories":"论文阅读","content":"2 简介 早期普遍使用RNN来处理翻译任务，它是把输入和输出序列化为token，然后对每个token逐步计算。输入为上一轮计算的状态和当前的输入token，输出为下一轮的状态和输出token。所谓token就是一个单词或一个分词，起始符，终止符等组成，然后映射到一个具体的数值表中。这个结构的输入和输出也被称为编码器-解码器架构。 RNN的主要问题在于编码器和解码器中间通过一个状态传递信息，在处理长序列问题中计算效率和表现不太行，而且必须串行执行，效率低。于是，作者提出了基于注意力机制Transformer架构。它能够并行化训练，在8块P100训练12小时就能取得不错的效果。 ","date":"2024-04-18","objectID":"/posts/doc/transformer/:2:0","tags":"transformer","title":"【论文阅读】Attention Is All You Need","uri":"/posts/doc/transformer/"},{"categories":"论文阅读","content":"3 模型结构 编码器由6个相同的层组成，图中仅展示了一个子层，每个子层中第一个是多头注意力机制捕捉不同位置之间的全局依赖关，第二个是全连接前馈神经网络主要用于非线性变换和特征提取。两个子层都使用了 层归一化和残差连接来保持梯度稳定并提升训练效率，可能是为了在深层网络中保持有效梯度传递和加速收敛。全连接层的作用是为了低维数据(512)扩展到高维（2048）输出。 ","date":"2024-04-18","objectID":"/posts/doc/transformer/:3:0","tags":"transformer","title":"【论文阅读】Attention Is All You Need","uri":"/posts/doc/transformer/"},{"categories":"论文阅读","content":"3.1 嵌入层 图中的embedding layer来源过程如下，句子-\u003etoken化-\u003etoken ID-\u003e嵌入层（d=512)，这样一个词就由一个512维的稠密向量，例如[1.212, 3.234, 5.111, …]所对应的表示“我”。这样一段句子本质上就是一个嵌入矩阵作为输入。Positional Encoding是为了捕捉单词之间的顺序关系，计算公式如下，pos是位置，i是嵌入向量的索引，d=512。 \\begin{align} PE_{(pos, 2i)} \u0026= \\sin \\left( \\frac{pos}{10000^{\\frac{2i}{d}}} \\right) \\ PE_{(pos, 2i+1)} \u0026= \\cos \\left( \\frac{pos}{10000^{\\frac{2i}{d}}} \\right) \\end{align} ","date":"2024-04-18","objectID":"/posts/doc/transformer/:3:1","tags":"transformer","title":"【论文阅读】Attention Is All You Need","uri":"/posts/doc/transformer/"},{"categories":"论文阅读","content":"3.2 多头注意力 文中的多头注意力是由8个缩放点乘积注意力合并得到的，先说缩放点积注意力。Q,K,V是一组抽象的概念，Q直观说就是生成的方向，K用于输入信息匹配，QK内积得到当前位置哪个输出信息最相关，一轮计算得到两个内容，注意力输出表示全局上下文重要信息，权重表示查询位置Q对K的重要程度。 \\begin{align} \\text{Attention}(Q, K, V) \u0026= \\text{softmax} \\left( \\frac{Q K^T}{\\sqrt{d_k}} \\right) V \\end{align} ","date":"2024-04-18","objectID":"/posts/doc/transformer/:3:2","tags":"transformer","title":"【论文阅读】Attention Is All You Need","uri":"/posts/doc/transformer/"},{"categories":"论文阅读","content":"3.3 前馈神经网络 扩大维度至2048，捕捉更复杂的特征。Relu将函数变为非线形运算是精髓，是产生智能学习质变的关键之一。 \\begin{align} FFN(x) \u0026= \\max(0, x W_1 + b_1) W_2 + b_2 \\end{align} ","date":"2024-04-18","objectID":"/posts/doc/transformer/:3:3","tags":"transformer","title":"【论文阅读】Attention Is All You Need","uri":"/posts/doc/transformer/"},{"categories":"论文阅读","content":"3.4 注意力在模型中的应用 文中用自注意力层和循环层，卷积层做比较，都是把一个向量映射到另一个向量，比如隐藏层在编码器和解码器之间的作用。通过对计算复杂度，并行化，最长路径网络的比较，自注意力的时间复杂度明显是比其余两者更低的。 Tranformer运用多头注意力在下面三个方面 在编码器-解码器层中，Q来自于上一个解码层的输出，而K,V来源于上一个解码层输出。这样使得解码器的每个位置都能获取输入序列的所有位置。 编码器中的自注意力层，所有的Q，K，V来自于相同的来源。编码器中，它们来源于前一层的输出，第一层来源于嵌入层。这样做生成某个位置的单词时可以考虑输入序列的任意位置单词，捕捉长距离依赖关系。 解码器的自注意力层同样能能关注到第一个位置到当前输出位置的信息，为了保证自回归，训练中不能提前知道未来的词，将未来位置的注意力权重设置负无穷，softmax就会输出0的概率。 ","date":"2024-04-18","objectID":"/posts/doc/transformer/:3:4","tags":"transformer","title":"【论文阅读】Attention Is All You Need","uri":"/posts/doc/transformer/"},{"categories":"论文阅读","content":"4 训练 使用了Adam优化器，β1 = 0.9, β2 = 0.98 and ϵ= 10−9和动态学习率算法。 正则化方法，残差连接+每个子层dropout概率0.1+标签平滑处理 ","date":"2024-04-18","objectID":"/posts/doc/transformer/:4:0","tags":"transformer","title":"【论文阅读】Attention Is All You Need","uri":"/posts/doc/transformer/"},{"categories":"论文阅读","content":"5 评价 相比于RNN和CNN最显著的优点就是能够并行化，缩短计算时间，并且能够合适地处理长序列，捕捉上下序列重要信息。我认为他的缺点是必须要提供大量的数据集才能有较理想的效果，个人设备训练时很容易因数据集不足或模型参数少造成过拟合。 ","date":"2024-04-18","objectID":"/posts/doc/transformer/:5:0","tags":"transformer","title":"【论文阅读】Attention Is All You Need","uri":"/posts/doc/transformer/"},{"categories":"笔记","content":"Robot Framework简介 RPA框架是机器人过程自动化(RPA)的开源库和工具的集合，它被设计为与Robot Framework和Python一起使用。目标是为软件机器人开发人员提供良好的文档和积极维护的核心库。相比较于纯python实现，它的使用逻辑清晰，使用方法简单，可扩展性高。但是在某些特殊场景，Robot Framework具有局限性，比如并发执行，直接接管浏览器而不需要重新打开。 以下Robot Framework简称RF。RF的应用分为两种，一个是为公司解放劳动力，自动化处理简单但又繁琐的操作。二是为个人使用，现电商抢购活动还有秒杀抢单我认为完全可以用RF实现的。 ","date":"2023-04-10","objectID":"/posts/doc/rf/:1:0","tags":"robot","title":"RF学习总结","uri":"/posts/doc/rf/"},{"categories":"笔记","content":"RF准备工作 ","date":"2023-04-10","objectID":"/posts/doc/rf/:2:0","tags":"robot","title":"RF学习总结","uri":"/posts/doc/rf/"},{"categories":"笔记","content":"环境 项目 版本 python 3.7.9 rpaframework 22.2.3 robotframework 5.0.1 selenium 4.5.0 ","date":"2023-04-10","objectID":"/posts/doc/rf/:3:0","tags":"robot","title":"RF学习总结","uri":"/posts/doc/rf/"},{"categories":"笔记","content":"开发工具 RF实体是一个.robot文件，pycharm的插件有点问题，而且不能识别里面的Keyword。因此使用Vscode进行开发。 需要准备的插件如下所示 ","date":"2023-04-10","objectID":"/posts/doc/rf/:4:0","tags":"robot","title":"RF学习总结","uri":"/posts/doc/rf/"},{"categories":"笔记","content":"RF结构 RF分为四部分Settings, Variables, Test Cases, Keywords ","date":"2023-04-10","objectID":"/posts/doc/rf/:5:0","tags":"robot","title":"RF学习总结","uri":"/posts/doc/rf/"},{"categories":"笔记","content":"*** Setting *** Documentation 用于机器人的描述和介绍，对执行并没有什么作用 Library 用于导入各种库，每个库会有上百个Keyword Library的官方文档（https://rpaframework.org/index.html） ","date":"2023-04-10","objectID":"/posts/doc/rf/:6:0","tags":"robot","title":"RF学习总结","uri":"/posts/doc/rf/"},{"categories":"笔记","content":"*** Variable *** 用于程序初始化的变量 @ 用作创建列表 \u0026 用作创建字典 $ 用作创建字符串或数字 ","date":"2023-04-10","objectID":"/posts/doc/rf/:7:0","tags":"robot","title":"RF学习总结","uri":"/posts/doc/rf/"},{"categories":"笔记","content":"*** Test Cases *** 与Task作用一样，用于写总流程 ","date":"2023-04-10","objectID":"/posts/doc/rf/:8:0","tags":"robot","title":"RF学习总结","uri":"/posts/doc/rf/"},{"categories":"笔记","content":"***Keywords *** 由多个自定义的Keyword组成，表示执行的步骤。 定义的Keyword下行加[Arguments] ${} 可作为函数的参数。 循环表示方法 FOR ${} IN @{} do something ${} END 判断表示方法 IF condititon do() ELSE IF condition do() ELSE do() END 异常处理 TRY Some Keyword EXCEPT ValueError: * type=GLOB AS ${error} Error Handler 1 ${error} EXCEPT [Ee]rror \\\\d+ (Invalid|Bad) usage type=REGEXP AS ${error} Error Handler 2 ${error} EXCEPT AS ${error} Error Handler 3 ${error} END ","date":"2023-04-10","objectID":"/posts/doc/rf/:9:0","tags":"robot","title":"RF学习总结","uri":"/posts/doc/rf/"},{"categories":"笔记","content":"Python扩展 导入库时使用的测试库的名称与实现它的模块或类的名称相同。 ","date":"2023-04-10","objectID":"/posts/doc/rf/:10:0","tags":"robot","title":"RF学习总结","uri":"/posts/doc/rf/"},{"categories":"笔记","content":"Library from robot.api.deco import library RF导入python的库就像直接实例化一个类，运行构造参数，如下图所示。 @library装饰器 配置实现为类的库的一种简单方法是使用robot.api.deco.library类装饰器。它允许配置库的作用域、版本、自定义参数转换器、文档格式和监听器，可选参数scope、version、converter、doc_format和监听器。当使用这些参数时，它们会自动设置匹配的ROBOT_LIBRARY_SCOPE、ROBOT_LIBRARY_VERSION、ROBOT_LIBRARY_CONVERTERS、ROBOT_LIBRARY_DOC_FORMAT和ROBOT_LIBRARY_LISTENER属性 ","date":"2023-04-10","objectID":"/posts/doc/rf/:11:0","tags":"robot","title":"RF学习总结","uri":"/posts/doc/rf/"},{"categories":"笔记","content":"Keyword from robot.api.deco import keyword 默认情况下，一个python类或模块下的所有函数被认为是Keyword。如果在设置中使用下图设置，默认不配置为keyword。函数的前缀可以使用@keyword开启。 或者直接使用@not_keyword禁用RF。 @keyword(name=None,tag=(),type=())-\u003eAny 可以修改把参数放在name里面 ","date":"2023-04-10","objectID":"/posts/doc/rf/:12:0","tags":"robot","title":"RF学习总结","uri":"/posts/doc/rf/"},{"categories":"笔记","content":"常用的库 ","date":"2023-04-10","objectID":"/posts/doc/rf/:13:0","tags":"robot","title":"RF学习总结","uri":"/posts/doc/rf/"},{"categories":"笔记","content":"RPA.Browswer.Selenium auto_close=${FALSE} //执行完不自动关闭 打开网站 Open Available Browser url 输入内容 Input Text locator text clear=True 下拉框选择 Select From List By Value locator values 单选按钮 Select Radio Button group_name value 点击元素 Click Element locator id:example name:example xpath://div[@id=“example”] css:div#example 直接提交页面的唯一表单 Submit Form 截图 Screenshot locator output 等待元素出现 Wait Until Page Contains Element locator timeout=None ","date":"2023-04-10","objectID":"/posts/doc/rf/:14:0","tags":"robot","title":"RF学习总结","uri":"/posts/doc/rf/"},{"categories":"笔记","content":"RPA.Excel.Files 打开excel Open Workbook path 读取返回表格 Read Worksheet As Table name=None header=False start=None 创建excel Create Workbook path fmt=xlsx sheet_name=None 设置表格值 Set Cell Value row column value 获取表格值并返回 Get Cell Value row column name=active sheet ","date":"2023-04-10","objectID":"/posts/doc/rf/:15:0","tags":"robot","title":"RF学习总结","uri":"/posts/doc/rf/"},{"categories":"笔记","content":"参考资料 Robot Framework User Guide（http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html） RPA Documentation, Training Courses, Certificates | Robocorp(https://robocorp.com/docs) Keyword libraries(https://robocorp.com/docs/libraries) XPATH定位的用法(https://www.cnblogs.com/aiyiless/p/16111340.html) ","date":"2023-04-10","objectID":"/posts/doc/rf/:16:0","tags":"robot","title":"RF学习总结","uri":"/posts/doc/rf/"},{"categories":"笔记","content":"iptables简介 netfilter/iptables（简称为iptables）组成Linux平台下的包过滤防火墙，与大多数的Linux软件一样，这个包过滤防火墙是免费的，它可以代替昂贵的商业防火墙解决方案，完成封包过滤、封包重定向和网络地址转换（NAT）等功能。 ","date":"2021-03-01","objectID":"/posts/doc/iptables/:1:0","tags":"网络安全","title":"iptables屏蔽所有国外IP!网络安全的利器！","uri":"/posts/doc/iptables/"},{"categories":"笔记","content":"iptables基础 ​ 规则（rules）其实就是网络管理员预定义的条件，规则一般的定义为“如果数据包头符合这样的条件，就这样处理这个数据包”。规则存储在内核空间的信息 包过滤表中，这些规则分别指定了源地址、目的地址、传输协议（如TCP、UDP、ICMP）和服务类型（如HTTP、FTP和SMTP）等。当数据包与规 则匹配时，iptables就根据规则所定义的方法来处理这些数据包，如放行（accept）、拒绝（reject）和丢弃（drop）等。配置防火墙的 主要工作就是添加、修改和删除这些规则。 ","date":"2021-03-01","objectID":"/posts/doc/iptables/:2:0","tags":"网络安全","title":"iptables屏蔽所有国外IP!网络安全的利器！","uri":"/posts/doc/iptables/"},{"categories":"笔记","content":"iptables命令的管理控制选项 -A 在指定链的末尾添加（append）一条新的规则 -D 删除（delete）指定链中的某一条规则，可以按规则序号和内容删除 -I 在指定链中插入（insert）一条新的规则，默认在第一行添加 -R 修改、替换（replace）指定链中的某一条规则，可以按规则序号和内容替换 -L 列出（list）指定链中所有的规则进行查看 -E 重命名用户定义的链，不改变链本身 -F 清空（flush） -N 新建（new-chain）一条用户自己定义的规则链 -X 删除指定表中用户自定义的规则链（delete-chain） -P 设置指定链的默认策略（policy） -Z 将所有表的所有链的字节和数据包计数器清零 -n 使用数字形式（numeric）显示输出结果 -v 查看规则表详细信息（verbose）的信息 -V 查看版本(version) -h 获取帮助（help） ","date":"2021-03-01","objectID":"/posts/doc/iptables/:3:0","tags":"网络安全","title":"iptables屏蔽所有国外IP!网络安全的利器！","uri":"/posts/doc/iptables/"},{"categories":"笔记","content":"防火墙处理数据包的四种方式 ACCEPT 允许数据包通过 DROP 直接丢弃数据包，不给任何回应信息 REJECT 拒绝数据包通过，必要时会给数据发送端一个响应的信息。 LOG在/var/log/messages文件中记录日志信息，然后将数据包传递给下一条规则 ","date":"2021-03-01","objectID":"/posts/doc/iptables/:4:0","tags":"网络安全","title":"iptables屏蔽所有国外IP!网络安全的利器！","uri":"/posts/doc/iptables/"},{"categories":"笔记","content":"iptables 官方文档 https://netfilter.org/ ","date":"2021-03-01","objectID":"/posts/doc/iptables/:5:0","tags":"网络安全","title":"iptables屏蔽所有国外IP!网络安全的利器！","uri":"/posts/doc/iptables/"},{"categories":"笔记","content":"屏蔽外网IP 下面介绍一种方法只有国内的IP才能连接服务器，对防火墙建设有参考价值 ","date":"2021-03-01","objectID":"/posts/doc/iptables/:6:0","tags":"网络安全","title":"iptables屏蔽所有国外IP!网络安全的利器！","uri":"/posts/doc/iptables/"},{"categories":"笔记","content":"背景 在我刚接触云产品时，使用的是腾讯云赠送的一个月云服务器。这一个月时间里我似乎也没部署过什么项目，就照着书上和网上的资料稍微捣鼓了下Ubuntu，但是没有使用网络服务的。可就在短短一个月内，有次上机检查，就发现cpu占用率99%，接着腾讯云给我发了条消息，说是中了挖矿病毒。查看日志后，来自卢森堡的一个IP成功登录。 后来我在阿里云租了个云服务器，在上面部署了C/S网络通信类的程序。刚开始网络编程功底不熟，没有对各种异常处理，如果没接收到预期格式的数据包就会报错。我使用的是一个很隐蔽的端口，但是经常会收到全球各地的连接，只要对方一发送数据包，服务器执行的程序就会报错退出。 再后来，我写了个网站，日志中经常能看到会有很多来自国外的爬虫进来逛。那么有没有什么方法屏蔽所有国外的连接呢？ ","date":"2021-03-01","objectID":"/posts/doc/iptables/:7:0","tags":"网络安全","title":"iptables屏蔽所有国外IP!网络安全的利器！","uri":"/posts/doc/iptables/"},{"categories":"笔记","content":"建立一条规则链 创建一条规则链mylink，加到入站的规则中 iptables -N mylink iptables -A INPUT -j mylink ","date":"2021-03-01","objectID":"/posts/doc/iptables/:8:0","tags":"网络安全","title":"iptables屏蔽所有国外IP!网络安全的利器！","uri":"/posts/doc/iptables/"},{"categories":"笔记","content":"获取国内所有的IP 获取所有国内的ip网段，保存到china_ssr.txt文件中 wget -q --timeout=60 -O- 'http://ftp.apnic.net/apnic/stats/apnic/delegated-apnic-latest' | awk -F\\| '/CN\\|ipv4/ { printf(\"%s/%d\\n\", $4, 32-log($5)/log(2)) }' \u003e /root/china_ssr.txt ","date":"2021-03-01","objectID":"/posts/doc/iptables/:9:0","tags":"网络安全","title":"iptables屏蔽所有国外IP!网络安全的利器！","uri":"/posts/doc/iptables/"},{"categories":"笔记","content":"shell脚本 观察ip网段，使用的是网络前缀格式，正好满足iptables的命令格式。用vim t跳转到末尾，发现竟然有8600多行国内网段。那么首先排除一个个手动输入命令的可能，于是我写了个脚本。 while read line do iptables -A mylink -s $line -j ACCEPT done \u003c china_ssr.txt 上面的脚本逐行读取文件的内容，然后执行命令。经过测试，发现iptables的优先级是自顶向下的，即当前规则必须是上面规则的子集，不然就无效。现在已经把所有国内IP允许访问，接下来就禁止全网IP。 iptables -A mylink -j DROP 上面这条命令极其危险。一定要放在链的末尾。本人就是输入了这条命令，导致无法连接到云服务器，无奈之下到阿里云回滚两个月前的快照。 ","date":"2021-03-01","objectID":"/posts/doc/iptables/:10:0","tags":"网络安全","title":"iptables屏蔽所有国外IP!网络安全的利器！","uri":"/posts/doc/iptables/"},{"categories":null,"content":"分布式系统，区块链技术爱好者，理想主义者 ","date":"0001-01-01","objectID":"/me/:0:0","tags":null,"title":"","uri":"/me/"}]